#!/usr/bin/env python2

import argparse, sys, os
from pwnlib.util.fiddling import hexdump

parser = argparse.ArgumentParser(
    description = 'Pwnlib HexDump'
)

parser.add_argument(
    'file',
    metavar='file',
    nargs='?',
    help='File to hexdump.  Reads from stdin if missing.',
    type=argparse.FileType('r'),
    default=sys.stdin
)

parser.add_argument(
    "-w", "--width",
    help="Number of bytes per line.",
    default='16',
)

parser.add_argument(
    "-l", "--highlight",
    help="Byte to highlight.",
    nargs="*",
)

parser.add_argument(
    "-s", "--skip",
    help="Skip this many initial bytes.",
    default='0',
)

parser.add_argument(
    "-c", "--count",
    help="Only show this many bytes.",
    default='-1',
)

parser.add_argument(
    "-o", "--offset",
    help="Addresses in left hand column starts at this address.",
    default='0',
)

def asint(s):
    if   s.startswith('0x'):
        return int(s, 16)
    elif s.startswith('0'):
        return int(s, 8)
    else:
        return int(s, 10)

args = parser.parse_args()

infile = args.file
width  = asint(args.width)
skip   = asint(args.skip)
count  = asint(args.count)
offset = asint(args.offset)

if skip:
    if infile == sys.stdin:
        infile.read(skip)
    else:
        infile.seek(skip, os.SEEK_CUR)

data = infile.read(count)

hl = []
if args.highlight:
    for hs in args.highlight:
        for h in hs.split(','):
            hl.append(asint(h))

print hexdump(data, width, highlight = hl, begin = offset)
