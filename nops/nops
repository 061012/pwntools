#!/usr/bin/env python
import sys
from pwn.i386 import nops

def _usage ():
    print 'Usage: %s <length> [--printable] [(-a|--avoid) <str>] [(-u|--unclobber) regs]' % sys.argv[0]
    exit(0)

regnames = ['eax', 'al', 'ax', 'es', 'ecx', 'cl', 'cx', 'cs', 'edx', 'dl', 'dx',
            'ss', 'ebx', 'bl', 'bx', 'ds', 'esp', 'ah', 'sp', 'fs', 'ebp', 'ch',
            'bp', 'gs', 'esi', 'dh', 'si', 'edi', 'bh', 'di']

if __name__ == '__main__':
    i = 1
    avoid = ''
    unclobber = []
    length = None
    while i < len(sys.argv):
        arg = sys.argv[i]
        if arg in ['-a', '--avoid']:
            try:
                avoid = sys.argv[i + 1]
            except:
                print 'no bytes to avoid given'
                _usage()
            i += 2
            continue
        if arg in ['-u', '--unclobber']:
            i += 1
            while i < len(sys.argv):
                reg = sys.argv[i].lower()
                if reg in regnames:
                    unclobber.append(reg)
                    i += 1
                else:
                    break
            if unclobber == [] and i == len(sys.argv):
                print 'no unclobberable registers given'
                _usage()
            continue
        if arg in ['-p', '--printable']:
            avoid += ''.join(map(chr, range(0, 0x20) + range(0x7f, 0x100)))
            i += 1
            continue
        try:
            length = int(arg)
        except:
            print 'what do you mean by "%s"?' % arg
            _usage()
        i += 1
    if length is None:
        print 'no length given'
        _usage()

    sys.stdout.write(nops(length,
                          avoid = avoid.decode('string_escape'),
                          unclobber = unclobber))
