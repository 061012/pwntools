#!/usr/bin/python

import argparse, tempfile, sys, subprocess, os

parser = argparse.ArgumentParser()
parser.add_argument('lines', metavar='line', nargs='*', help='Lines to assemble. If none are supplied, use stdin')
parser.add_argument("-b", "--bits", help="The assembly mode", choices=[16,32,64], default=32, type=int)
parser.add_argument("-f", "--format", help="Output format", choices=['raw', 'hex'], default='raw')
parser.add_argument("-o", metavar='file', help="Output file (defaults to stdout)", type=argparse.FileType('w'), default=sys.stdout)
parser.add_argument("-O", metavar='level', help="Optimization options to pass to nasm", choices = ['0', '1', 'x'], default='x')
args = parser.parse_args()

tmp = tempfile.NamedTemporaryFile(suffix='.asm')
tmpname = tmp.name

tmp.write('[BITS %d]\n' % args.bits)

if len(args.lines) > 0:
    tmp.write('\n'.join(args.lines))
else:
    tmp.write(sys.stdin.read())

tmp.flush()

try:
    retval = subprocess.call(['nasm', '-O' + args.O, '-o', tmpname + '.out', tmpname], stdout=sys.stderr, stderr=sys.stderr)
    tmp.close()

    if retval != 0:
        sys.exit(retval)

    with open(tmpname + '.out') as f:
        output = f.read()
    
    if args.format == 'raw':
        args.o.write(output)
    elif args.format == 'hex':
        args.o.write(output.encode('hex'))
    else:
        raise Exception("Unknown output format") # This really shouldn't happen

    args.o.flush()

finally:
    try:
        os.unlink(tmpname + '.out') 
    except:
        pass
