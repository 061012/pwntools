#!/usr/bin/python
import argparse, os
from pwn import flat, p8, p16, p32, p64

parser = argparse.ArgumentParser()
parser.add_argument('shellcode', type=argparse.FileType('r'), help='Shellcode to wrap into an ELF-file')
parser.add_argument("-o", metavar='file', help="Output file (defaults to appending a .out to the input file)", type=argparse.FileType('w'), default=None)
args = parser.parse_args()


if args.o == None:
    args.o = open(args.shellcode.name + '.out', 'w')

os.fchmod(args.o.fileno(), 0755)

shellcode = args.shellcode.read()
args.shellcode.close()

# ELF header
base            = 0x400000
ehdrsize        = 64
phdrsize        = 56
shdrsize        = 64
shellcodesize   = len(shellcode)
totalsize       = ehdrsize + phdrsize + shellcodesize
entry           = base + ehdrsize + phdrsize
args.o.write(flat(0x7f, "ELF", 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, func=p8))
args.o.write(flat(2, 62, func=p16))
args.o.write(p32(1))
args.o.write(flat(entry, ehdrsize, 0, func=p64))
args.o.write(p32(0))
args.o.write(flat(ehdrsize, phdrsize, 1, shdrsize, 0, 0, func=p16))

# LOAD program header
args.o.write(flat(1, 7))
args.o.write(flat(0, base, base, totalsize, totalsize, 4096, func=p64))

# Shellcode
args.o.write(shellcode)
